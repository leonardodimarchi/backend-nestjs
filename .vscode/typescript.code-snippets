{
  // Place your backend-template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "region": {
    "prefix": "region",
    "body": ["//#region $1", "", "$0", "", "//#endregion"]
  },
  "entity": {
    "prefix": "entity",
    "body": [
      "export interface $1EntityProps {",
      "}",
      "",
      "export type $1EntityCreateProps = Replace<",
      "  $1EntityProps,",
      "  {",
      "  }",
      ">;",
      "",
      "export class $1Entity extends BaseEntity<$1EntityProps> {",
      "  private constructor(",
      "    props: $1EntityProps,",
      "    baseEntityProps?: BaseEntityProps,",
      "  ) {",
      "    super(props, baseEntityProps);",
      "    Object.freeze(this);",
      "  }",
      "",
      "  static create(",
      "    {}: $1EntityCreateProps,",
      "    baseEntityProps?: BaseEntityProps,",
      "  ): Either<InvalidEmailError | InvalidNameError, $1Entity> {",
      "",
      "",
      "    return new Right(",
      "      new $1Entity(",
      "        {",
      "        },",
      "        baseEntityProps,",
      "      ),",
      "    );",
      "  }",
      "",
      "}"
    ]
  }
}
