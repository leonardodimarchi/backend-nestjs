import { MockCourse } from 'test/factories/mock-course';
import { InMemoryCourseRepository } from 'test/repositories/in-memory-course-repository';
import { InMemoryRepository } from 'test/repositories/in-memory-repository';
import { $EntityName$Entity } from '../entities/$EntityName$/$EntityName$.entity';
import { $EntityName$Repository } from '../repositories/$EntityName$.repository';
import {
  GetAll$EntityPluralName$UseCase,
  GetAll$EntityPluralName$UseCaseOutput,
} from './get-all-$EntityPluralName$.usecase';

describe('GetAll$EntityName$UseCase', () => {
  let usecase: GetAll$EntityName$UseCase;
  let repository: InMemoryRepository<$EntityName$Repository, $EntityName$Entity>;

  beforeEach(() => {
    repository = new InMemory$EntityName$Repository();
    usecase = new GetAll$EntityPluralName$UseCase(repository);
  });

  it('should return paginated', async () => {
    repository.save(Mock$EntityName$.createEntity());
    repository.save(Mock$EntityName$.createEntity());

    const result = await usecase.exec({
      paginationOptions: {
        page: 1,
        pageLimit: 2,
      },
    });

    expect(result.isRight()).toBeTruthy();
    expect(
      (result.value as GetAll$EntityPluralName$UseCaseOutput).paginated$EntityPluralName$.entities,
    ).toHaveLength(2);
  });
});
